generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model performance_assessment {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assessment_date DateTime @db.Date
  user_id         String   @db.Uuid
  skill_id        String   @db.Uuid
  rating          Int?
  feedback        String?  @db.VarChar(255)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  skill           skill    @relation(fields: [skill_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model platform {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reservation {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_date DateTime @db.Date
  end_date   DateTime @db.Date
  user_id    String   @db.Uuid
  skill_id   String   @db.Uuid
  status     String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  skill      skill    @relation(fields: [skill_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model skill {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String                   @db.VarChar(255)
  description            String?                  @db.VarChar(255)
  user_id                String                   @db.Uuid
  demand                 Int?
  performance            Int?
  usage_count            Int?
  created_at             DateTime                 @default(now()) @db.Timestamp(6)
  updated_at             DateTime                 @default(now()) @db.Timestamp(6)
  performance_assessment performance_assessment[]
  reservation            reservation[]
  user                   user                     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  usage_tracking         usage_tracking[]
}

model usage_tracking {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String   @db.Uuid
  skill_id       String   @db.Uuid
  usage_date     DateTime @db.Date
  usage_count    Int?
  usage_duration Int?
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  skill          skill    @relation(fields: [skill_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                  String                   @unique @db.VarChar(255)
  firstName              String?                  @db.VarChar(255)
  lastName               String?                  @db.VarChar(255)
  roq_user_id            String                   @db.VarChar(255)
  tenant_id              String                   @db.VarChar(255)
  created_at             DateTime                 @default(now()) @db.Timestamp(6)
  updated_at             DateTime                 @default(now()) @db.Timestamp(6)
  performance_assessment performance_assessment[]
  platform               platform[]
  reservation            reservation[]
  skill                  skill[]
  usage_tracking         usage_tracking[]
}
